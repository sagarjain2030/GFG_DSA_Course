O(1):
	- Time complexity is constant
	- That means, irrespective of input size, time taken by algorithm is constant
	- If algorithm doesn't have loop, recursion and call to any other non constant time function, algorithm would have O(1) time complexity.
	- Loop with constant number of runs also considered O(1) complexity.
O(n):
	- Time complexity of loop is said to be O(n) if loop variable is incremented/decremented by a constant amount.
O(n^c):
	- Time complexity of nested loops is equal to the number of times the innermost statement is executed.
O(log n):
	- Time complexity of a loop is considered as O(log n) if the loop variable is divided/multiplied by a constant amount.
	- For example, Binary search has O(log n) time complexity.
O(log log n);
	- Tiem complexity of a loop is considered as O(log log n) if loop variables is reduced/increased exponentially bya constant amount.
When there are consecutive loops, we calculate time complexity as sum of time complexities of individual loops.
For multiple if else statement, worst case complexity is calculated for if block which takes maximum amount of time.